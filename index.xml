<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ICNote - A Site for Sharing Notes about IC</title>
    <link>https://himingway.github.io/</link>
    <description>Recent content on ICNote - A Site for Sharing Notes about IC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 10 Sep 2019 00:42:49 +0800</lastBuildDate>
    
        <atom:link href="https://himingway.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于</title>
      <link>https://himingway.github.io/about/</link>
      <pubDate>Tue, 20 Aug 2019 21:38:52 +0800</pubDate>
      
      <guid>https://himingway.github.io/about/</guid>
      
        <description>

&lt;h2 id=&#34;关于博主&#34;&gt;关于博主&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;吉林大学 电子科学与工程学院 学士&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;西安电子科技大学 微电子学院 硕士&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;数字IC设计工程师&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;CPU Asic Designer&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;博文原则&#34;&gt;博文原则&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;博客内容以原创为主，翻译和转载为辅；&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;原创内容若有参考他人文章，在文末给出参考文章链接；&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;翻译文章在文章开头给出原文链接；&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对于转载的文章，尊重作者版权，遵守转载协议；&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;版权问题&#34;&gt;版权问题&lt;/h3&gt;

&lt;p&gt;本博客首发的原创作品，采用 “CC BY-NC-ND 4.0” 版权协议。&lt;/p&gt;

&lt;h3 id=&#34;版权声明如下&#34;&gt;版权声明如下：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;允许自由分享、修改博文内容；&lt;/li&gt;
&lt;li&gt;转载需保留署名；&lt;/li&gt;
&lt;li&gt;严禁他人进行商业性使用；&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;对使用者的建议如下&#34;&gt;对使用者的建议如下：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;若要转载，请留言说明，并在文末注明出处；&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>EDA 工具使用笔记</title>
      <link>https://himingway.github.io/post/eda/</link>
      <pubDate>Tue, 10 Sep 2019 00:42:49 +0800</pubDate>
      
      <guid>https://himingway.github.io/post/eda/</guid>
      
        <description>

&lt;h2 id=&#34;1-vcs-与-verdi-联合使用&#34;&gt;1. VCS 与 Verdi 联合使用&lt;/h2&gt;

&lt;p&gt;在 VCS 编译的时候，要额外加上 &lt;code&gt;-debug_access+all -kdb -lca&lt;/code&gt; 这个三个选项参数，这样就能在 VCS Compile 中看到 simv.daidir/kdb.elab++这个目录，这个目录就是 VCS 为 Verdi 产生的库，其实就是 VCS 帮 Verdi 生成了一个 Verdi 认识的中间文件，可支持单步调试功能。&lt;/p&gt;

&lt;p&gt;如果有了&lt;code&gt;​simv.daidir/kdb.elab++&lt;/code&gt;库文件， 可以用&lt;code&gt;Verdi -sv +v2k -elab simv.daidir/kdb -ssf xxx.fsdb&lt;/code&gt; 命令打开 Verdi，或者直接&lt;code&gt;Verdi -sv +v2k -ssf xxx.fsdb&lt;/code&gt;，或者增加一个选项，&lt;code&gt;-gui=verdi&lt;/code&gt;，表示使用 verdi 这个工具进行单步调试。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>PCI Note</title>
      <link>https://himingway.github.io/post/pci-fundamental-and-pci-transaction-ordering/pci-note/</link>
      <pubDate>Mon, 09 Sep 2019 00:17:28 +0800</pubDate>
      
      <guid>https://himingway.github.io/post/pci-fundamental-and-pci-transaction-ordering/pci-note/</guid>
      
        <description>

&lt;h2 id=&#34;1-关于-memory-write-and-invalidate&#34;&gt;1. 关于 &lt;code&gt;Memory Write and Invalidate&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;规范中的描述是
It allows a memory performance optimization by invalidating a &amp;ldquo;dirty&amp;rdquo; line in a write-back cache without requiring the actual write-back cycle thus shortening access time.&lt;/p&gt;

&lt;p&gt;对一个新手来说理解这句话很难，天书嘛。就像我。其实非常简单，分 3 步慢慢理解。
PCI 总线地址映射到 cpu 存储地址（内存地址），我们对这片 cpu 存储地址执行读写，等于读写了 PCI 总线地址，等于读写了 PCI 设备。&lt;/p&gt;

&lt;p&gt;当这片 cpu 存储器地址使用 write back 的 chche 策略时，就会出现有的 cache 跟实际的存储器不一致。cache 里的内容会比存储器里的更新，当然术语习惯称它们为“脏” &amp;ndash; dirty。标记为 dirty 的 cache 会在合适的时机 write back 到存储器&amp;ndash;这里是 PCI 设备。&lt;/p&gt;

&lt;p&gt;如果对 PCI 设备一次写入一段较大的数据，大于 1 个 cache line，而这个 cache 恰恰又是 dirty 的，那么就可以直接把数据写入存储器，同时把相关 cache line 的 dirty 标记去掉，这个操作就是 Memory Write and Invalidate 事务。 Invalidate 的是 cache line 的 dirty 标记。&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://himingway.github.io/post/pci-fundamental-and-pci-transaction-ordering/table-of-content/&#34;&gt;本系列文章目录&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>PCI Fundamental and PCI Transaction Ordering (2)</title>
      <link>https://himingway.github.io/post/pci-fundamental-and-pci-transaction-ordering/pci-fundamental-and-pci-transaction-ordering-2/</link>
      <pubDate>Mon, 09 Sep 2019 00:01:41 +0800</pubDate>
      
      <guid>https://himingway.github.io/post/pci-fundamental-and-pci-transaction-ordering/pci-fundamental-and-pci-transaction-ordering-2/</guid>
      
        <description>

&lt;h2 id=&#34;2-pci-protocol&#34;&gt;2. PCI Protocol&lt;/h2&gt;

&lt;h3 id=&#34;2-1-bus-command&#34;&gt;2.1. Bus Command&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://himingway.github.io/assets/20190909234959.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;PCI 的 C/BE#信号复用命令与字节选通引脚。在地址周期的时候，C/BE[3:0]#信号表示 PCI 总线的命令；这些命令如下表所示。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;C/BE[3:0]#&lt;/th&gt;
&lt;th&gt;命令类型&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0000&lt;/td&gt;
&lt;td&gt;Interrupt Acknowledge&lt;/td&gt;
&lt;td&gt;中断响应总线事务读取当前挂接在 PCI 总线上的中断控制器的中断向量号。目前大多数处理器系统的中断控制器都不挂接在 PCI 总线上，因此这种总线事务很少使用&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0001&lt;/td&gt;
&lt;td&gt;Special Cycle&lt;/td&gt;
&lt;td&gt;HOST 主桥可以使用 Special Cycle 事务在 PCI 总线上进行信息广播&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0010&lt;/td&gt;
&lt;td&gt;I/O Read&lt;/td&gt;
&lt;td&gt;HOST 主桥可以使用该总线事务对 PCI 设备的 LO 地址空间进行读操作。目前多数 PCI 设备都不支持 O 地址空间，而仅支持存储器地址空间，但是仍有部分 PCI 设备同时包含 LO 地址空间和存储器地址空间&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0011&lt;/td&gt;
&lt;td&gt;I/O Write&lt;/td&gt;
&lt;td&gt;对 PCⅠ总线的 LO 地址空间进行写操作&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0100&lt;/td&gt;
&lt;td&gt;Reserved&lt;/td&gt;
&lt;td&gt;Reserved&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0101&lt;/td&gt;
&lt;td&gt;Reserved&lt;/td&gt;
&lt;td&gt;Reserved&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0110&lt;/td&gt;
&lt;td&gt;Memory Read&lt;/td&gt;
&lt;td&gt;HOST 主桥可以使用该总线事务对 PCI 设备的存储器空间进行读操作。PCI 设备也可以使用该总线事务读取处理器的存储器空间&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;0111&lt;/td&gt;
&lt;td&gt;Memory Write&lt;/td&gt;
&lt;td&gt;HOST 主桥可以使用该总线事务对 PCI 设备的存储器空间进行写操作。PCI 设备也可以使用该总线事务向处理器的存储器空间进行写操作&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;Reserved&lt;/td&gt;
&lt;td&gt;Reserved&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1001&lt;/td&gt;
&lt;td&gt;Reserved&lt;/td&gt;
&lt;td&gt;Reserved&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1010&lt;/td&gt;
&lt;td&gt;Configuration Read&lt;/td&gt;
&lt;td&gt;HOST 主桥可以对 PCl 设备的配置空间进行读操作。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1001&lt;/td&gt;
&lt;td&gt;Configuration Write&lt;/td&gt;
&lt;td&gt;HOST 主桥可以对 PCl 设备的配置空间进行写操作。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1100&lt;/td&gt;
&lt;td&gt;Memory Read Multiple&lt;/td&gt;
&lt;td&gt;HOST 主桥可以使用该总线事务对 PCI 设备的存储器空间进行多行读操作&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1001&lt;/td&gt;
&lt;td&gt;Dual Address Cycle&lt;/td&gt;
&lt;td&gt;PCI 总线支持 64 位地址，处理器或者其他 PCI 设备访问 64 位 PCI 总线地址时，必须使用双地址周期产生 64 位的 PCI 总线地址。PCI 设备使用 DMA 读写方式访问 64 位的存储器地址时，也可以使用该总线事务&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;Memory Read Line&lt;/td&gt;
&lt;td&gt;HOST 主桥可以使用该总线事务对 PCI 设备的存储器空间进行单行读操作&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1001&lt;/td&gt;
&lt;td&gt;Memory Write and Invalidate&lt;/td&gt;
&lt;td&gt;存储器写并无效操作，与存储器写不同，PCI 设备可以使用该总线事务对主存储器空间进行写操作。该总线事务将数据写人主存储器的同时，将对应 Cache 行中的数据“使无效”&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;2-2-basic-transfer-control&#34;&gt;2.2. Basic Transfer Control&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://himingway.github.io/assets/20190910001455.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;下面介绍 PCI 基本的传输协议：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当 FRAME# 和 IRDY# 同时无效的时候，PCI BUS 处于闲置（IDLE）状态。&lt;/li&gt;
&lt;li&gt;FRANE#有效，表明数据开始传输：

&lt;ul&gt;
&lt;li&gt;当 FRAME# 信号有效的第一个时钟周期，PCI BUS 为地址周期（Address Phase）。&lt;/li&gt;
&lt;li&gt;当 IRDY# 和 TRDY# 同时有效的时候，PCI BUS 为数据周期（Data Phase）。&lt;/li&gt;
&lt;li&gt;当 IRDY# 或 TRDY# 的时候，PCI BUS 为等待周期（Wait Cycle）。&lt;/li&gt;
&lt;li&gt;当所需要的数据准备好的时候，xRDY# 必须是有效的（对于写操作，当 Master 的数据准备好的时候，IRDY# 有效；对于读操作，当 Target 的数据准备好哒时候，TRDY# 有效）。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;当 FRAME# 无效，IRDY# 有效的时候，标志着最后一笔传输，这笔传输必须被传输完成（也就是说，发生最后一笔传输的时候，IRDY# 和 TRDY# 必须是有效的，若 TRDY# 无效，则等待 TRDY# 有效）。&lt;/li&gt;
&lt;li&gt;当最后一笔传输完成后，FRAME# 和 IRDY# 同时无效。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://himingway.github.io/post/pci-fundamental-and-pci-transaction-ordering/table-of-content/&#34;&gt;本系列文章目录&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>PCI Fundamental and PCI Transaction Ordering (1)</title>
      <link>https://himingway.github.io/post/pci-fundamental-and-pci-transaction-ordering/pci-fundamental-and-pci-transaction-ordering-1/</link>
      <pubDate>Sun, 08 Sep 2019 17:41:25 +0800</pubDate>
      
      <guid>https://himingway.github.io/post/pci-fundamental-and-pci-transaction-ordering/pci-fundamental-and-pci-transaction-ordering-1/</guid>
      
        <description>

&lt;h2 id=&#34;1-pci-pin-list&#34;&gt;1. PCI Pin List&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://himingway.github.io/assets/20190908182945.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在 PICI 设备中，对于 target 设备，它的 PIN 最小的数目为 47 个；对于 Master 设备，它的 PIN 最小的数目为 49 个。除了这些基本的 PIN，PCI 设备还有一些扩展的 PIN，比如 64 位扩展 PIN：AD[63:32]，等。对于基本的 PIN，它的名称和功能如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AD[31:0]: 复用的地址和数据总线&lt;/li&gt;
&lt;li&gt;C/BE[3::0]: 总线命令（Bus Command）和 Byte 使能信号（Byte Enable），这也是一个复用的总线。当总线在地址周期时，它的功能为总线命令；当总线在数据周期时候，它的功能为 Byte 使能。&lt;/li&gt;
&lt;li&gt;PAR: Parity，奇偶校验位&lt;/li&gt;
&lt;li&gt;FRAME#: 周期帧（Cycle Frame）, 当 FRAME# 有效时，意味着总线传输开始；当 FRAME# 无效时，意味着该时钟的传输为最后一个数据传输，或者数据传输已经完成。&lt;/li&gt;
&lt;li&gt;IRDY#: 标志 Initiator 的数据准备完成 Ready&lt;/li&gt;
&lt;li&gt;TRDY#: 标志 Target 的数据准备完成 Ready&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://himingway.github.io/assets/20190908184159.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;STOP#: 当该信号有效时候，Target 设备向 Master 设备发送停止信号。&lt;/li&gt;
&lt;li&gt;LOCK#: PCI 主设备可以使用该信号，原子操作将目标设备的某个存储器或者 I/O 资源锁定，以禁止其他 PCI 主设备访问此资源，直到锁定这个资源的主设备将其释放。PCI 总线使用 LOCK# 信号实现 LOCK 总线事务，只有 HOST 主桥、PCI 桥或者其他桥片可以使用 LOCK#信号。&lt;/li&gt;
&lt;li&gt;IDSEL: 在 PCI 总线配置读写总线事务中，该信号用于选择 PCI 目标设备。&lt;/li&gt;
&lt;li&gt;DEVSEL#: 该信号有效时，表示 PCI 总线的目标设备已经准备好，该信号有效表示目标设备已经完成了地址译码，也就是说，这个信号已经被选择。&lt;/li&gt;
&lt;li&gt;REQ#: Master 的 Request 仲裁信号。&lt;/li&gt;
&lt;li&gt;GNT#: Master 的 Grant 仲裁信号。&lt;/li&gt;
&lt;li&gt;INTx#: 请求中断信号。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://himingway.github.io/post/pci-fundamental-and-pci-transaction-ordering/table-of-content/&#34;&gt;本系列文章目录&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Table of Content for PCI Fundamental and PCI Transaction Ordering</title>
      <link>https://himingway.github.io/post/pci-fundamental-and-pci-transaction-ordering/table-of-content/</link>
      <pubDate>Sun, 08 Sep 2019 00:02:12 +0800</pubDate>
      
      <guid>https://himingway.github.io/post/pci-fundamental-and-pci-transaction-ordering/table-of-content/</guid>
      
        <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://himingway.github.io/post/pci-fundamental-and-pci-transaction-ordering/pci-fundamental-and-pci-transaction-ordering-1&#34;&gt;PCI Fundamental and PCI Transaction Ordering (1)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://himingway.github.io/post/pci-fundamental-and-pci-transaction-ordering/pci-fundamental-and-pci-transaction-ordering-2&#34;&gt;PCI Fundamental and PCI Transaction Ordering (2)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;其它：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://himingway.github.io/post/pci-fundamental-and-pci-transaction-ordering/pci-note/&#34;&gt;PCI笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
  </channel>
</rss>
